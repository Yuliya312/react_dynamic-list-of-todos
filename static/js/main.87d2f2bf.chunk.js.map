{"version":3,"sources":["utils/api.ts","constants/urls.ts","components/Todo/Todo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["getData","url","a","fetch","response","json","getUsers","getTodos","Todo","todo","id","title","completed","user","className","name","TodoList","todos","scope","map","key","App","useState","todosWithUsers","setTodosWithUsers","isLoading","setIsLoading","handleClickLoad","Promise","all","then","usersFromApi","todosFromApi","find","userId","finally","length","type","onClick","sort","b","localeCompare","Number","disabled","ReactDOM","render","document","getElementById"],"mappings":"0RAEO,SAAeA,EAAtB,kC,4CAAO,WAA2BC,GAA3B,eAAAC,EAAA,sEACkBC,MAAMF,GADxB,cACCG,EADD,yBAGEA,EAASC,QAHX,4C,sBAMA,IAAMC,EAAQ,uCAAG,sBAAAJ,EAAA,+EACfF,ECTgB,+CDQD,2CAAH,qDAIRO,EAAQ,uCAAG,sBAAAL,EAAA,+EACfF,ECZgB,+CDWD,2CAAH,qDENRQ,G,MAAkB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAE9BC,EAIED,EAJFC,GACAC,EAGEF,EAHFE,MACAC,EAEEH,EAFFG,UACAC,EACEJ,EADFI,KAGF,OACE,oCACE,wBAAIC,UAAU,eAAeJ,GAC7B,wBAAII,UAAU,eAAeD,EAAOA,EAAKE,KAAO,IAChD,wBAAID,UAAU,eAAeH,GAC7B,wBAAIG,UAAU,eAAeF,EAAY,OAAS,eCV3CI,EAAsB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACpC,OACE,oCACE,2BAAOH,UAAU,SACf,2BAAOA,UAAU,gBACf,4BACE,wBAAIA,UAAU,cAAcI,MAAM,OAAlC,MACA,wBAAIJ,UAAU,cAAcI,MAAM,OAAlC,QACA,wBAAIJ,UAAU,cAAcI,MAAM,OAAlC,SACA,wBAAIJ,UAAU,cAAcI,MAAM,OAAlC,YAGJ,+BACGD,EAAME,KAAI,SAAAV,GAAI,OACb,wBACEK,UAAU,aACVM,IAAKX,EAAKC,IAEV,kBAAC,EAAD,CAAMD,KAAMA,YC4EXY,EAjGC,WAAO,IAAD,EACwBC,mBAA0B,IADlD,mBACbC,EADa,KACGC,EADH,OAEcF,oBAAS,GAFvB,mBAEbG,EAFa,KAEFC,EAFE,KAIdC,EAAkB,WACtBD,GAAa,GAEbE,QAAQC,IAAI,CAACvB,IAAYC,MACtBuB,MAAK,YAAmC,IAAD,mBAAhCC,EAAgC,KAAlBC,EAAkB,KACtCR,EAAkBQ,EAAab,KAAI,SAAAV,GAAI,sBAClCA,EADkC,CAErCI,KAAMkB,EAAaE,MAAK,SAAApB,GAAI,OAAIA,EAAKH,KAAOD,EAAKyB,mBAGpDC,SAAQ,kBAAMT,GAAa,OAyBhC,OAAKH,EAAea,OAsBlB,yBAAKtB,UAAU,OACb,wBAAIA,UAAU,SAAd,yBACA,yBAAKA,UAAU,WACb,4BACEuB,KAAK,SACLvB,UAAU,SACVwB,QAlDe,WACrBd,EAAkB,YAAID,GAAgBgB,MAAK,SAACrC,EAAGsC,GAC7C,OAAItC,EAAEW,MAAQ2B,EAAE3B,KACPX,EAAEW,KAAKE,KAAK0B,cAAcD,EAAE3B,KAAKE,MAGnC,QAyCL,gBAOA,4BACEsB,KAAK,SACLvB,UAAU,SACVwB,QA/CgB,WACtBd,EAAkB,YAAID,GAAgBgB,MAAK,SAACrC,EAAGsC,GAC7C,OAAOtC,EAAES,MAAM8B,cAAcD,EAAE7B,aA0C7B,iBAOA,4BACE0B,KAAK,SACLvB,UAAU,SACVwB,QAhDoB,WAC1Bd,EAAkB,YAAID,GAAgBgB,MAAK,SAACrC,EAAGsC,GAC7C,OAAOE,OAAOxC,EAAEU,WAAa8B,OAAOF,EAAE5B,iBA2CpC,sBAQF,kBAAC,EAAD,CAAUK,MAAOM,KAEfA,EAAea,QACf,4BAAQC,KAAK,SAASC,QAASX,EAAiBgB,SAAUlB,GACvDA,EAAY,aAAe,eAjDhC,yBAAKX,UAAU,OACb,wBAAIA,UAAU,SAAd,yBACA,oCACE,4BACEuB,KAAK,SACLvB,UAAU,sBACVwB,QAASX,EACTgB,SAAUlB,GAJZ,SASDA,GACC,uBAAGX,UAAU,QAAb,gBCxDV8B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.87d2f2bf.chunk.js","sourcesContent":["import { USERS_URL, TODOS_URL } from '../constants/urls';\n\nexport async function getData <T>(url: string): Promise<T> {\n  const response = await fetch(url);\n\n  return response.json();\n}\n\nexport const getUsers = async (): Promise<User[]> => {\n  return getData<User[]>(USERS_URL);\n};\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  return getData<Todo[]>(TODOS_URL);\n};\n","export const USERS_URL = 'https://jsonplaceholder.typicode.com/users';\nexport const TODOS_URL = 'https://jsonplaceholder.typicode.com/todos';\n","import React, { FC } from 'react';\n\ninterface Props{\n  todo: TodoWithUsers;\n}\n\nexport const Todo: FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <>\n      <td className=\"table__cell\">{id}</td>\n      <td className=\"table__cell\">{user ? user.name : ''}</td>\n      <td className=\"table__cell\">{title}</td>\n      <td className=\"table__cell\">{completed ? 'done' : 'not done'}</td>\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport './TodoList.css';\n\nimport { Todo } from '../Todo/Todo';\n\ninterface Props{\n  todos: TodoWithUsers[];\n}\n\nexport const TodoList: FC<Props> = ({ todos }) => {\n  return (\n    <>\n      <table className=\"table\">\n        <thead className=\"table__title\">\n          <tr>\n            <th className=\"table__cell\" scope=\"col\">ID</th>\n            <th className=\"table__cell\" scope=\"col\">User</th>\n            <th className=\"table__cell\" scope=\"col\">Title</th>\n            <th className=\"table__cell\" scope=\"col\">Status</th>\n          </tr>\n        </thead>\n        <tbody>\n          {todos.map(todo => (\n            <tr\n              className=\"table__row\"\n              key={todo.id}\n            >\n              <Todo todo={todo} />\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React, { FC, useState } from 'react';\nimport './App.css';\n\nimport { getUsers, getTodos } from './utils/api';\nimport { TodoList } from './components/TodoList/TodoList';\n\nconst App: FC = () => {\n  const [todosWithUsers, setTodosWithUsers] = useState<TodoWithUsers[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleClickLoad = () => {\n    setIsLoading(true);\n\n    Promise.all([getUsers(), getTodos()])\n      .then(([usersFromApi, todosFromApi]) => {\n        setTodosWithUsers(todosFromApi.map(todo => ({\n          ...todo,\n          user: usersFromApi.find(user => user.id === todo.userId),\n        })));\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  const handleSortName = () => {\n    setTodosWithUsers([...todosWithUsers].sort((a, b) => {\n      if (a.user && b.user) {\n        return a.user.name.localeCompare(b.user.name);\n      }\n\n      return 0;\n    }));\n  };\n\n  const handleSortTitle = () => {\n    setTodosWithUsers([...todosWithUsers].sort((a, b) => {\n      return a.title.localeCompare(b.title);\n    }));\n  };\n\n  const handleSortReadiness = () => {\n    setTodosWithUsers([...todosWithUsers].sort((a, b) => {\n      return Number(a.completed) - Number(b.completed);\n    }));\n  };\n\n  if (!todosWithUsers.length) {\n    return (\n      <div className=\"App\">\n        <h1 className=\"title\">Dynamic list of TODOs</h1>\n        <>\n          <button\n            type=\"button\"\n            className=\"button button-start\"\n            onClick={handleClickLoad}\n            disabled={isLoading}\n          >\n            Load\n          </button>\n        </>\n        {isLoading && (\n          <p className=\"text\">Loading...</p>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Dynamic list of TODOs</h1>\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={handleSortName}\n        >\n          Sort by name\n        </button>\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={handleSortTitle}\n        >\n          Sort by title\n        </button>\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={handleSortReadiness}\n        >\n          Sort by readiness\n        </button>\n      </div>\n      <TodoList todos={todosWithUsers} />\n\n      {!todosWithUsers.length && (\n        <button type=\"button\" onClick={handleClickLoad} disabled={isLoading}>\n          {isLoading ? 'Loading...' : 'Load Todos'}\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}