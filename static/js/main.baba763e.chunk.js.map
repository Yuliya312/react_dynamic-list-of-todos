{"version":3,"sources":["utils/api.ts","components/Todo/Todo.tsx","components/TodoList/TodoList.tsx","App.tsx","constants/urls.ts","index.tsx"],"names":["getData","url","a","fetch","response","json","Todo","todo","id","title","completed","user","className","name","TodoList","todos","scope","map","key","getUsers","getTodos","App","useState","setTodos","setUsers","todosWithUsers","setTodosWithUsers","isLoading","setIsLoading","length","type","onClick","sort","b","localeCompare","Number","Promise","all","then","usersFromApi","todosFromApi","find","userId","finally","disabled","ReactDOM","render","document","getElementById"],"mappings":"wRAAO,SAAeA,EAAtB,kC,4CAAO,WAA2BC,GAA3B,eAAAC,EAAA,sEACkBC,MAAMF,GADxB,cACCG,EADD,yBAGEA,EAASC,QAHX,4C,gCCQMC,EAAkB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAE9BC,EAIED,EAJFC,GACAC,EAGEF,EAHFE,MACAC,EAEEH,EAFFG,UACAC,EACEJ,EADFI,KAGF,OACE,oCACE,wBAAIC,UAAU,eAAeJ,GAC7B,wBAAII,UAAU,eAAeD,EAAOA,EAAKE,KAAO,IAChD,wBAAID,UAAU,eAAeH,GAC7B,wBAAIG,UAAU,eAAeF,EAAY,OAAS,cCZ3CI,EAAsB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACpC,OACE,2BAAOH,UAAU,SACf,2BAAOA,UAAU,gBACf,4BACE,wBAAIA,UAAU,cAAcI,MAAM,OAAlC,MACA,wBAAIJ,UAAU,cAAcI,MAAM,OAAlC,QACA,wBAAIJ,UAAU,cAAcI,MAAM,OAAlC,SACA,wBAAIJ,UAAU,cAAcI,MAAM,OAAlC,YAGJ,+BACGD,EAAME,KAAI,SAAAV,GAAI,OACb,wBACEK,UAAU,aACVM,IAAKX,EAAKC,IAEV,kBAAC,EAAD,CAAMD,KAAMA,WClBlBY,EAAQ,uCAAG,sBAAAjB,EAAA,+EACRF,ECTgB,+CDQR,2CAAH,qDAIRoB,EAAQ,uCAAG,sBAAAlB,EAAA,+EACRF,ECZgB,+CDWR,2CAAH,qDAmGCqB,EA/FC,WAAO,IAAD,EACMC,mBAAiB,IADvB,mBACbP,EADa,KACNQ,EADM,OAECD,mBAAiB,IAA7BE,EAFW,sBAGwBF,mBAA2B,IAHnD,mBAGbG,EAHa,KAGGC,EAHH,OAIcJ,oBAAkB,GAJhC,mBAIbK,EAJa,KAIFC,EAJE,KA2CpB,OAAKb,EAAMc,OAsBT,yBAAKjB,UAAU,OACb,wBAAIA,UAAU,SAAd,yBACA,yBAAKA,UAAU,WACb,4BACEkB,KAAK,SACLlB,UAAU,SACVmB,QAlDe,WACrBL,EAAkB,YAAID,GAAgBO,MAAK,SAAC9B,EAAG+B,GAC7C,OAAI/B,EAAES,MAAQsB,EAAEtB,KACPT,EAAES,KAAKE,KAAKqB,cAAcD,EAAEtB,KAAKE,MAGnC,QAyCL,gBAOA,4BACEiB,KAAK,SACLlB,UAAU,SACVmB,QA/CgB,WACtBL,EAAkB,YAAID,GAAgBO,MAAK,SAAC9B,EAAG+B,GAC7C,OAAO/B,EAAEO,MAAMyB,cAAcD,EAAExB,aA0C7B,iBAOA,4BACEqB,KAAK,SACLlB,UAAU,SACVmB,QAhDoB,WAC1BL,EAAkB,YAAID,GAAgBO,MAAK,SAAC9B,EAAG+B,GAC7C,OAAOE,OAAOjC,EAAEQ,WAAayB,OAAOF,EAAEvB,iBA2CpC,sBAQF,kBAAC,EAAD,CAAUK,MAAOU,KA7CjB,yBAAKb,UAAU,OACb,wBAAIA,UAAU,SAAd,yBACA,oCACE,4BACEkB,KAAK,SACLlB,UAAU,sBACVmB,QA7Cc,WACtBH,GAAa,GAEbQ,QAAQC,IAAI,CAAClB,IAAYC,MACtBkB,MAAK,YAAmC,IAAD,mBAAhCC,EAAgC,KAAlBC,EAAkB,KACtChB,EAASe,GACThB,EAASiB,GACTd,EAAkBc,EAAavB,KAAI,SAAAV,GAAI,sBAClCA,EADkC,CAErCI,KAAM4B,EAAaE,MAAK,SAAA9B,GAAI,OAAIA,EAAKH,KAAOD,EAAKmC,mBAGpDC,SAAQ,kBAAMf,GAAa,OAkCtBgB,SAAUjB,GAJZ,SASDA,GACC,uBAAGf,UAAU,QAAb,gBEtEViC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.baba763e.chunk.js","sourcesContent":["export async function getData <T>(url: string): Promise<T> {\n  const response = await fetch(url);\n\n  return response.json();\n}\n","import React, { FC } from 'react';\n\n// import User from '../user/User';\n\ninterface Props{\n  todo: TodosWithUsers;\n}\n\nexport const Todo: FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <>\n      <td className=\"table__cell\">{id}</td>\n      <td className=\"table__cell\">{user ? user.name : ''}</td>\n      <td className=\"table__cell\">{title}</td>\n      <td className=\"table__cell\">{completed ? 'done' : 'not done'}</td>\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport './TodoList.css';\n\nimport { Todo } from '../Todo/Todo';\n\ninterface Props{\n  todos: TodosWithUsers[];\n}\n\nexport const TodoList: FC<Props> = ({ todos }) => {\n  return (\n    <table className=\"table\">\n      <thead className=\"table__title\">\n        <tr>\n          <th className=\"table__cell\" scope=\"col\">ID</th>\n          <th className=\"table__cell\" scope=\"col\">User</th>\n          <th className=\"table__cell\" scope=\"col\">Title</th>\n          <th className=\"table__cell\" scope=\"col\">Status</th>\n        </tr>\n      </thead>\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            className=\"table__row\"\n            key={todo.id}\n          >\n            <Todo todo={todo} />\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React, { FC, useState } from 'react';\nimport './App.css';\n\nimport { USERS_URL, TODOS_URL } from './constants/urls';\nimport { getData } from './utils/api';\n\nimport { TodoList } from './components/TodoList/TodoList';\n\nconst getUsers = async (): Promise<User[]> => {\n  return getData<User[]>(USERS_URL);\n};\n\nconst getTodos = async (): Promise<Todo[]> => {\n  return getData<Todo[]>(TODOS_URL);\n};\n\nconst App: FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [, setUsers] = useState<User[]>([]);\n  const [todosWithUsers, setTodosWithUsers] = useState<TodosWithUsers[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const handleClickLoad = () => {\n    setIsLoading(true);\n\n    Promise.all([getUsers(), getTodos()])\n      .then(([usersFromApi, todosFromApi]) => {\n        setUsers(usersFromApi);\n        setTodos(todosFromApi);\n        setTodosWithUsers(todosFromApi.map(todo => ({\n          ...todo,\n          user: usersFromApi.find(user => user.id === todo.userId),\n        })));\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  const handleSortName = () => {\n    setTodosWithUsers([...todosWithUsers].sort((a, b) => {\n      if (a.user && b.user) {\n        return a.user.name.localeCompare(b.user.name);\n      }\n\n      return 0;\n    }));\n  };\n\n  const handleSortTitle = () => {\n    setTodosWithUsers([...todosWithUsers].sort((a, b) => {\n      return a.title.localeCompare(b.title);\n    }));\n  };\n\n  const handleSortReadiness = () => {\n    setTodosWithUsers([...todosWithUsers].sort((a, b) => {\n      return Number(a.completed) - Number(b.completed);\n    }));\n  };\n\n  if (!todos.length) {\n    return (\n      <div className=\"App\">\n        <h1 className=\"title\">Dynamic list of TODOs</h1>\n        <>\n          <button\n            type=\"button\"\n            className=\"button button-start\"\n            onClick={handleClickLoad}\n            disabled={isLoading}\n          >\n            Load\n          </button>\n        </>\n        {isLoading && (\n          <p className=\"text\">Loading...</p>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Dynamic list of TODOs</h1>\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={handleSortName}\n        >\n          Sort by name\n        </button>\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={handleSortTitle}\n        >\n          Sort by title\n        </button>\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={handleSortReadiness}\n        >\n          Sort by readiness\n        </button>\n      </div>\n      <TodoList todos={todosWithUsers} />\n    </div>\n  );\n};\n\nexport default App;\n","export const USERS_URL = 'https://jsonplaceholder.typicode.com/users';\nexport const TODOS_URL = 'https://jsonplaceholder.typicode.com/todos';\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}